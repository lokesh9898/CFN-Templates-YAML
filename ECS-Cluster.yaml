Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster? If left blank, the cluster will consist of t2.large, t3.large, m4.large, and m5.large instances
        Type: String
        Default: t3a.large

    KeyName:
        Description: Choose the key which should be used to bring up the container instances
        Type: AWS::EC2::KeyPair::KeyName
        Default: blazar-automation

    MinClusterSize:
        Description: How many minimum ECS hosts do you want to scale down to?
        Type: Number
        Default: 1

    DesClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 2

    MaxClusterSize:
        Description: How many maximum ECS hosts do you want to scale up to?
        Type: Number
        Default: 4

    Bedrock:
        Description: Name of the bedrock stack. This will be used to get VPC and subnet details
        Type: String
        Default: SDLDev-Bedrock

    PlatformS3BucketName:
        Description: Name of the Platform S3 Bucket
        Type: String
        Default: com-sdlproducts-tridion-dev-platform-bucket

    ElasticSearchDomain:
        Description: Elastic Search domain name
        Type: String

    EcsStatIndex:
        Description: Elastic Search index to store ECS cluster statistic
        Type: String
        Default: ecs-cluster

    ErrorNotificationTopic:
        Description: Error Notification Topic to send email on failures
        Type: String

    ReleaseVersion:
        Description: The version of SDL Web release to deploy
        Type: String
        Default: release-10-0

    VersionAppDynamicsJava:
        Description: Version of AppDynamics Java client to install
        Type: String
        Default: "4.5.11.26665"

    VersionAppDynamicsDotNet:
        Description: Version of AppDynamics .Net client to install
        Type: String
        Default: "4.5.12.0"

    SpotPrice:
        Description: Do you want to use Spot instances for the cluster? If so, enter Spot Price.
        Type: String
        Default: ""

    ClusterOS:
        Description: Choose the base OS for the ECS Cluster, Windows or Linux.
        Type: String
        Default: "linux"
        AllowedValues: ["linux", "windows"]

    DevFlag:
        Description: If set to yes, allows access to ECS hosts from Amsterdam and Kiev
        Type: String
        Default: "no"
        AllowedValues: ["yes", "no"]

    LinuxECSAMI:
        Description: Linux ECS Optimised Linux AMI ID
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

    WindowsECSAMI:
        Description: Windows ECS Optimised AMI ID
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Default: /aws/service/ecs/optimized-ami/windows_server/2016/english/full/recommended/image_id

    EncryptEfs:
        Description: Enable EFS encryption
        Type: String
        Default: true
        AllowedValues: [true, false]

    ScaleUpMemThreshold:
        Description: The memory threshold on which cluster should scale up. Default threshold (in %) is based on 8GB RAM instance. Threshold = (1 - (max(Container Reservation) / Total Capacity of a Single Container Instance)) * 100
        Type: Number
        Default: 75
        MinValue: 50
        MaxValue: 90

    ScaleDownMemThreshold:
        Description: The memory threshold on which cluster should scale down. Default threshold (in %) is based on 8GB RAM instance.
        Type: Number
        Default: 50
        MinValue: 30
        MaxValue: 70

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - InstanceType
          - SpotPrice
          - DesClusterSize
          - MinClusterSize
          - MaxClusterSize
    ParameterLabels:
      InstanceType:
        default: Instance type
      SpotPrice:
        default: Spot price
      DesClusterSize:
        default: Desired cluster size
      MinClusterSize:
        default: Minimum cluster size
      MaxClusterSize:
        default: Maximum cluster size

Conditions:
    isWindowsECS: !Equals [!Ref ClusterOS, "windows"]
    isLinuxECS: !Equals [!Ref ClusterOS, "linux"]
    spotInstances: !Not [!Equals [!Ref SpotPrice, ""]]
    isDevCluster: !Equals [!Ref DevFlag, "yes"]
    isDevLinuxCluster: !And [!Condition isLinuxECS, !Condition isDevCluster]
    isDevWindowsCluster: !And [!Condition isWindowsECS, !Condition isDevCluster]
    isEfsEncrypted: !Equals [!Ref EncryptEfs, true]
    isESDomain: !And
            - !Not [!Equals [!Ref ElasticSearchDomain, ""]]
            - !Not [!Equals [!Ref ElasticSearchDomain, "none"]]
    hasInstanceType: !Not [!Equals [!Ref InstanceType, ""]]
    hasSpotInstanceType: !And [!Condition spotInstances, !Condition hasInstanceType]

Resources:

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 90

    ECSHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId:
                Fn::ImportValue: !Sub ${Bedrock}-VPCID
            GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-ECS-Hosts

    EFSSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Condition: isLinuxECS
        Properties:
            VpcId:
                Fn::ImportValue: !Sub ${Bedrock}-VPCID
            GroupDescription: Access to the EFS filesystem
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-EFSSecurityGroup

    EFSSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Condition: isLinuxECS
        Properties:
            GroupId: !Ref EFSSecurityGroup
            IpProtocol: tcp
            FromPort: 2049
            ToPort: 2049
            SourceSecurityGroupId: !Ref ECSHostSecurityGroup
            Description: Access from ECSHostSecurityGroup

    AMSRDPIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Condition: isDevWindowsCluster
        Properties:
            GroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: 10.100.0.0/16
            Description: Access from Amsterdam

    KievRDPIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Condition: isDevWindowsCluster
        Properties:
            GroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: 10.91.0.0/16
            Description: Access from Kiev

    MechelenRDPIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Condition: isDevWindowsCluster
        Properties:
            GroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 3389
            ToPort: 3389
            CidrIp: 10.98.0.0/16
            Description: Access from Mechelen

    AMSSSHIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Condition: isDevLinuxCluster
        Properties:
            GroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 10.100.0.0/16
            Description: Access from Amsterdam

    KievSSHIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Condition: isDevLinuxCluster
        Properties:
            GroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 10.91.0.0/16
            Description: Access from Kiev

    MechelenSSHIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Condition: isDevLinuxCluster
        Properties:
            GroupId: !Ref ECSHostSecurityGroup
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 10.98.0.0/16
            Description: Access from Mechelen

    ClusterFileSystemKmsKey:
        Type: AWS::KMS::Key
        Condition: isEfsEncrypted
        Properties:
          KeyPolicy:
            Version: 2012-10-17
            Id: key-default-ecs-efs
            Statement:
              - Sid: Allow administration of the key
                Effect: Allow
                Principal:
                  AWS: !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':root'
                Action: 'kms:*'
                Resource: '*'

    ClusterFileSystemKmsKeyAlias:
        Type: 'AWS::KMS::Alias'
        Condition: isEfsEncrypted
        Properties:
          AliasName: !Sub 'alias/${AWS::StackName}-efs-key'
          TargetKeyId: !Ref ClusterFileSystemKmsKey

    ClusterFileSystem:
        Type: AWS::EFS::FileSystem
        Condition: isLinuxECS
        Properties:
          Encrypted: !Ref EncryptEfs
          KmsKeyId: !If
          - isEfsEncrypted
          - !GetAtt ClusterFileSystemKmsKey.Arn
          - !Ref AWS::NoValue
          FileSystemTags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-ECS-Filesystem
              - Key: aws:cloudformation:stack-name
                Value: !Ref AWS::StackName

    MountTarget1:
        Type: AWS::EFS::MountTarget
        Condition: isLinuxECS
        Properties:
          FileSystemId: !Ref ClusterFileSystem
          SubnetId:
              Fn::ImportValue: !Sub ${Bedrock}-PriSubnet1
          SecurityGroups:
              - Ref: EFSSecurityGroup

    MountTarget2:
        Type: AWS::EFS::MountTarget
        Condition: isLinuxECS
        Properties:
          FileSystemId: !Ref ClusterFileSystem
          SubnetId:
              Fn::ImportValue: !Sub ${Bedrock}-PriSubnet2
          SecurityGroups:
              - Ref: EFSSecurityGroup

    SNSLambdaRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                      Effect: "Allow"
                      Principal:
                          Service:
                              - "autoscaling.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
            Path: "/"

    LambdaExecutionRole:
        Type: "AWS::IAM::Role"
        Properties:
            Policies:
                -
                  PolicyName: !Sub LambdaExecutionRole-${AWS::StackName}
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          -
                            Effect: "Allow"
                            Action:
                                - autoscaling:CompleteLifecycleAction
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                                - ec2:DescribeInstances
                                - ec2:DescribeInstanceAttribute
                                - ec2:DescribeInstanceStatus
                                - ec2:DescribeHosts
                                - ecs:ListContainerInstances
                                - ecs:SubmitContainerStateChange
                                - ecs:SubmitTaskStateChange
                                - ecs:DescribeContainerInstances
                                - ecs:UpdateContainerInstancesState
                                - ecs:ListTasks
                                - ecs:ListServices
                                - ecs:DescribeTasks
                                - sns:Publish
                                - sns:ListSubscriptions
                            Resource: "*"
                          -
                            Effect: "Allow"
                            Action:
                                - es:ESHttp*
                            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticSearchDomain}/${EcsStatIndex}
                          -
                            Effect: "Allow"
                            Action:
                                - es:DescribeElasticsearchDomain
                                - es:ESHttpPut
                            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticSearchDomain}
                          -
                            Action:
                                - es:ESHttpPost
                            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticSearchDomain}/*
                            Effect: "Allow"

            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                      Effect: "Allow"
                      Principal:
                          Service:
                              - "lambda.amazonaws.com"
                      Action:
                          - "sts:AssumeRole"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole
                - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
            Path: "/"

    DrainContainerInstanceLambda:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket: !Ref PlatformS3BucketName
                S3Key: !Sub "${ReleaseVersion}/lambda-functions/DrainContainerInstance.zip"
            Handler: DrainContainerInstance.lambda_handler
            Role: !GetAtt LambdaExecutionRole.Arn
            Runtime: python2.7
            Timeout: 300

    DrainContainerInstanceLambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            RetentionInDays: 90
            LogGroupName: !Join ["", ["/aws/lambda/", !Ref DrainContainerInstanceLambda]]

    ASGSNotificationTopic:
        Type: AWS::SNS::Topic
        Properties:
            Subscription:
                -
                  Endpoint: !GetAtt DrainContainerInstanceLambda.Arn
                  Protocol: lambda

    EcsStatUploadLambda:
        Type: AWS::Lambda::Function
        Condition: isESDomain
        Properties:
            Environment:
              Variables:
                ESDomain: !Ref ElasticSearchDomain
                ESIndex: !Ref EcsStatIndex
                EcsCluster: !Ref ECSCluster
                SnsTopicArn: !Ref ErrorNotificationTopic
            Code:
                S3Bucket: !Ref PlatformS3BucketName
                S3Key: !Sub "${ReleaseVersion}/lambda-functions/EcsStatisticUpload.zip"
            Handler: EcsStatisticUpload.lambda_handler
            Role: !GetAtt LambdaExecutionRole.Arn
            Runtime: python2.7
            Timeout: 300

    EcsStatUploadLambdaLogGroup:
        Type: AWS::Logs::LogGroup
        Condition: isESDomain
        Properties:
            RetentionInDays: 90
            LogGroupName: !Join ["", ["/aws/lambda/", !Ref EcsStatUploadLambda]]

    EcsStatUploadInitialize:
        Type: Custom::EcsStatUploadInitialize
        Condition: isESDomain
        DependsOn: EcsStatUploadLambdaLogGroup
        Properties:
            ServiceToken: !GetAtt EcsStatUploadLambda.Arn

    LambdaScheduledRule:
      Type: "AWS::Events::Rule"
      Condition: isESDomain
      Properties:
        Description: "ScheduledRule"
        ScheduleExpression: "rate(5 minutes)"
        State: "ENABLED"
        Targets:
          -
            Arn: !GetAtt EcsStatUploadLambda.Arn
            Id: "EcsStatUploadLambdav1"

    PermissionForEventsToInvokeLambda:
      Type: "AWS::Lambda::Permission"
      Condition: isESDomain
      Properties:
        FunctionName: !Ref EcsStatUploadLambda
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: !GetAtt LambdaScheduledRule.Arn

    LambdaInvokePermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref DrainContainerInstanceLambda
            Action: lambda:InvokeFunction
            Principal: "sns.amazonaws.com"
            SourceArn: !Ref ASGSNotificationTopic

    LambdaSubscriptionToSNSTopic:
        Type: AWS::SNS::Subscription
        Properties:
            Endpoint: !GetAtt DrainContainerInstanceLambda.Arn
            Protocol: lambda
            TopicArn: !Ref ASGSNotificationTopic

    ASGTerminateHook:
        Type: AWS::AutoScaling::LifecycleHook
        Properties:
            AutoScalingGroupName:
                !If
                    - isLinuxECS
                    - !Ref ECSAutoScalingGroupLinux
                    - !Ref ECSAutoScalingGroupWindows
            DefaultResult: "ABANDON"
            HeartbeatTimeout: 900
            LifecycleTransition: "autoscaling:EC2_INSTANCE_TERMINATING"
            NotificationTargetARN: !Ref ASGSNotificationTopic
            RoleARN: !GetAtt SNSLambdaRole.Arn

    ECSCluster:
        Type: AWS::ECS::Cluster

    ECSAutoScalingGroupLinux:
        Condition: isLinuxECS
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn:
              - MountTarget1
              - MountTarget2
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub ${Bedrock}-PriSubnet1
                - Fn::ImportValue: !Sub ${Bedrock}-PriSubnet2
            LaunchTemplate: !If
                - hasInstanceType
                - LaunchTemplateId: !Ref ECSLaunchTemplateLinux
                  Version: !GetAtt ECSLaunchTemplateLinux.LatestVersionNumber
                - !Ref AWS::NoValue
            MixedInstancesPolicy: !If
                - hasInstanceType
                - !Ref AWS::NoValue
                - LaunchTemplate:
                      LaunchTemplateSpecification:
                          LaunchTemplateId: !Ref ECSLaunchTemplateLinux
                          Version: !GetAtt ECSLaunchTemplateLinux.LatestVersionNumber
                      Overrides:
                          - InstanceType: t3a.large
                          - InstanceType: t3.large
                          - InstanceType: t2.large
                          - InstanceType: m5.large
                          - InstanceType: m4.large
                  InstancesDistribution:
                      OnDemandPercentageAboveBaseCapacity: !If
                          - spotInstances
                          - 0
                          - 100
                      SpotInstancePools: 1
                      SpotMaxPrice: !If
                          - spotInstances
                          - !Ref SpotPrice
                          - !Ref AWS::NoValue
            MinSize: !Ref MinClusterSize
            MaxSize: !Ref MaxClusterSize
            DesiredCapacity: !Ref DesClusterSize
        CreationPolicy:
            ResourceSignal:
                Timeout: PT5M
        UpdatePolicy:
            !If
                - spotInstances
                - AutoScalingReplacingUpdate:
                      WillReplace: true
                - AutoScalingRollingUpdate:
                      MinInstancesInService: !Ref DesClusterSize
                      MinSuccessfulInstancesPercent: 50
                      MaxBatchSize: 1
                      PauseTime: PT5M
                      WaitOnResourceSignals: true
                      SuspendProcesses:
                          - HealthCheck
                          - ReplaceUnhealthy
                          - AZRebalance
                          - AlarmNotification
                          - ScheduledActions

    ECSAutoScalingGroupWindows:
        Condition: isWindowsECS
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub ${Bedrock}-PriSubnet1
                - Fn::ImportValue: !Sub ${Bedrock}-PriSubnet2
            LaunchConfigurationName: !Ref ECSLaunchConfigurationWindows
            MinSize: !Ref MinClusterSize
            MaxSize: !Ref MaxClusterSize
            DesiredCapacity: !Ref DesClusterSize
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName} ECS host
                  PropagateAtLaunch: true
                - Key: spot-enabled
                  Value:
                      !If
                          - isDevCluster
                          - "true"
                          - "false"
                  PropagateAtLaunch: false
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            !If
                - spotInstances
                - AutoScalingReplacingUpdate:
                      WillReplace: true
                - AutoScalingRollingUpdate:
                      MinInstancesInService: !Ref DesClusterSize
                      MinSuccessfulInstancesPercent: 50
                      MaxBatchSize: 1
                      PauseTime: PT15M
                      WaitOnResourceSignals: true
                      SuspendProcesses:
                          - HealthCheck
                          - ReplaceUnhealthy
                          - AZRebalance
                          - AlarmNotification
                          - ScheduledActions

    ECSScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: "ChangeInCapacity"
            AutoScalingGroupName:
                !If
                    - isLinuxECS
                    - !Ref ECSAutoScalingGroupLinux
                    - !Ref ECSAutoScalingGroupWindows
            Cooldown: "60"
            ScalingAdjustment: 1

    ECSScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: "ChangeInCapacity"
            AutoScalingGroupName:
                !If
                    - isLinuxECS
                    - !Ref ECSAutoScalingGroupLinux
                    - !Ref ECSAutoScalingGroupWindows
            Cooldown: "60"
            ScalingAdjustment: -1

    MemAlarmHigh:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: Scale-up if MemoryReservation > threshold for 2 minutes
            MetricName: MemoryReservation
            Namespace: AWS/ECS
            Statistic: Maximum
            Period: 60
            EvaluationPeriods: 2
            Threshold: !Ref ScaleUpMemThreshold
            AlarmActions:
                - !Ref ECSScaleUpPolicy
            Dimensions:
                - Name: ClusterName
                  Value: !Ref ECSCluster
            ComparisonOperator: GreaterThanThreshold

    MemAlarmLow:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmDescription: Scale-down if MemoryReservation < threshold for 10 minutes
            MetricName: MemoryReservation
            Namespace: AWS/ECS
            Statistic: Maximum
            Period: 60
            EvaluationPeriods: 10
            Threshold: !Ref ScaleDownMemThreshold
            AlarmActions:
                - !Ref ECSScaleDownPolicy
            Dimensions:
                - Name: ClusterName
                  Value: !Ref ECSCluster
            ComparisonOperator: LessThanThreshold

    ECSLaunchTemplateLinux:
        Condition: isLinuxECS
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateData:
                ImageId: !Ref LinuxECSAMI
                SecurityGroupIds:
                    - !GetAtt ECSHostSecurityGroup.GroupId
                KeyName: !Ref KeyName
                InstanceType: !If
                    - hasInstanceType
                    - !Ref InstanceType
                    - !Ref AWS::NoValue
                TagSpecifications:
                    - ResourceType: instance
                      Tags:
                      - Key: Name
                        Value: !Sub ${AWS::StackName} ECS host
                      - Key: spot-enabled
                        Value: !If
                          - spotInstances
                          - "true"
                          - "false"
                InstanceMarketOptions: !If
                    - hasSpotInstanceType
                    - SpotOptions:
                        MaxPrice: !Ref SpotPrice
                        SpotInstanceType: "one-time"
                      MarketType: "spot"
                    - !Ref AWS::NoValue
                IamInstanceProfile:
                    Arn: !GetAtt ECSInstanceProfile.Arn
                UserData:
                    "Fn::Base64": !Sub |
                            #!/bin/bash
                            set -xe
                            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                            yum -y upgrade
                            echo 'Installing prerequisites'
                            yum install -y nfs-utils aws-cfn-bootstrap bind-utils aws-cli unzip
                            mkdir /efs
                            eval "echo -e '`dig @169.254.169.253 +short ${ClusterFileSystem}.efs.${AWS::Region}.amazonaws.com`:/\t/efs\tnfs4\tnfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2\t0 0' >> /etc/fstab"
                            echo 'Mounting EFS'
                            mount -a
                            # increase Ulimits
                            sed -i 's/nofile=1024:4096/nofile=1024:65536/' /etc/sysconfig/docker && systemctl restart docker
                            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                            # download appdynamics
                            if [ ! -f "/efs/appdynamics/java/linux/${VersionAppDynamicsJava}/javaagent.jar" ]; then
                                echo 'Downloading Java AppD agent'
                                mkdir -p /efs/appdynamics/java/linux/${VersionAppDynamicsJava}
                                curl https://sdl-installers.s3.amazonaws.com/appdynamics/java/linux/${VersionAppDynamicsJava}.zip --output /tmp/appdynamics-java-linux-${VersionAppDynamicsJava}.zip
                                unzip -o /tmp/appdynamics-java-linux-${VersionAppDynamicsJava}.zip -d /efs/appdynamics/java/linux/${VersionAppDynamicsJava}
                            else
                                echo 'Java AppD agent already present'
                            fi
                            if [ ! -f "/efs/appdynamics/dotnet/linux/${VersionAppDynamicsDotNet}/AppDynamics.Agent.netstandard.dll" ]; then
                                echo 'Downloading DotNet AppD agent'
                                mkdir -p /efs/appdynamics/dotnet/linux/${VersionAppDynamicsDotNet}
                                curl https://sdl-installers.s3.amazonaws.com/appdynamics/dotnet/linux/${VersionAppDynamicsDotNet}.zip --output /tmp/appdynamics-dotnet-linux-${VersionAppDynamicsDotNet}.zip
                                unzip -o /tmp/appdynamics-dotnet-linux-${VersionAppDynamicsDotNet}.zip -d /efs/appdynamics/dotnet/linux/${VersionAppDynamicsDotNet}
                            else
                                echo 'DotNet AppD agent already present'
                            fi
                            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchTemplateLinux
                            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroupLinux
        Metadata:
            AWS::CloudFormation::Init:
                config:
                    packages:
                        yum:
                            awslogs: []
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchTemplateLinux.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchTemplateLinux
                        "/etc/awslogs/awscli.conf":
                            content: !Sub |
                                [plugins]
                                cwlogs = cwlogs
                                [default]
                                region = ${AWS::Region}
                        "/etc/awslogs/awslogs.conf":
                            content: !Sub |
                                [general]
                                state_file = /var/lib/awslogs/agent-state
                                [/var/log/messages]
                                datetime_format = %b %d %H:%M:%S
                                file = /var/log/messages
                                log_stream_name = {instance_id}/var/log/messages
                                log_group_name = ${LogGroup}
                                [/var/log/secure]
                                datetime_format = %b %d %H:%M:%S
                                file = /var/log/secure
                                log_stream_name = {instance_id}/var/log/secure
                                log_group_name = ${LogGroup}
                                [/var/log/cron]
                                datetime_format = %b %d %H:%M:%S
                                file = /var/log/cron
                                log_stream_name = {instance_id}/var/log/cron
                                log_group_name = ${LogGroup}
                                [/var/log/cloud-init.log]
                                datetime_format = %b %d %H:%M:%S
                                file = /var/log/cloud-init.log
                                log_stream_name = {instance_id}/var/log/cloud-init.log
                                log_group_name = ${LogGroup}
                                [/var/log/cfn-init.log]
                                datetime_format = %Y-%m-%d %H:%M:%S
                                file = /var/log/cfn-init.log
                                log_stream_name = {instance_id}/var/log/cfn-init.log
                                log_group_name = ${LogGroup}
                                [/var/log/cfn-hup.log]
                                datetime_format = %Y-%m-%d %H:%M:%S
                                file = /var/log/cfn-hup.log
                                log_stream_name = {instance_id}/var/log/cfn-hup.log
                                log_group_name = ${LogGroup}
                                [/var/log/cfn-init-cmd.log]
                                datetime_format = %Y-%m-%d %H:%M:%S
                                file = /var/log/cfn-init-cmd.log
                                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                                log_group_name = ${LogGroup}
                                [/var/log/cloud-init-output.log]
                                file = /var/log/cloud-init-output.log
                                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                                log_group_name = ${LogGroup}
                                [/var/log/dmesg]
                                file = /var/log/dmesg
                                log_stream_name = {instance_id}/var/log/dmesg
                                log_group_name = ${LogGroup}
                                [/var/log/user-data.log]
                                file = /var/log/user-data.log
                                log_stream_name = {instance_id}/var/log/user-data.log
                                log_group_name = ${LogGroup}
                            mode: '000644'
                            owner: root
                            group: root
                        "/etc/awslogs/config/ecs.conf":
                            content: !Sub |
                                [/var/log/ecs/ecs-init.log]
                                file = /var/log/ecs/ecs-init.log.*
                                log_group_name = /var/log/ecs/ecs-init.log
                                log_stream_name = {instance_id}/var/log/ecs/ecs-init.log
                                datetime_format = %Y-%m-%dT%H:%M:%SZ
                                [/var/log/ecs/ecs-agent.log]
                                file = /var/log/ecs/ecs-agent.log.*
                                log_stream_name = {instance_id}/var/log/ecs/ecs-agent.log
                                log_group_name = ${LogGroup}
                                datetime_format = %Y-%m-%dT%H:%M:%SZ
                            mode: '000644'
                            owner: root
                            group: root

                    services:
                        sysvinit:
                            awslogsd:
                                enabled: true
                                ensureRunning: true
                                packages:
                                    yum:
                                        - awslogs
                                files:
                                    - '/etc/awslogs/awslogs.conf'
                                    - '/etc/awslogs/awscli.conf'
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    # Other condition, other ImageId and of course powershell for UserData
    ECSLaunchConfigurationWindows:
        Condition: isWindowsECS
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref WindowsECSAMI
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
            -
                DeviceName: /dev/sda1
                Ebs:
                    VolumeSize: 100
                    VolumeType: gp2
            SpotPrice:
                !If
                    - spotInstances
                    - !Ref SpotPrice
                    - !Ref AWS::NoValue
            SecurityGroups:
                - !Ref ECSHostSecurityGroup
            KeyName: !Ref KeyName
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData:
                !If
                    - isDevWindowsCluster
                    - Fn::Base64: !Sub |
                        <powershell>
                        ## The following line helps the DrainContainerInstance lambda function
                        # ECS_CLUSTER=${ECSCluster}
                        [Environment]::SetEnvironmentVariable("ECS_ENABLE_TASK_CPU_MEM_LIMIT", "false", "Machine")

                        Import-Module ECSTools
                        Initialize-ECSAgent -Cluster ${ECSCluster} -ReservedMemory 1536 -EnableTaskIAMRole -LoggingDrivers "[`"json-file`",`"awslogs`"]"
                        Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
                        cfn-init.exe -v -s ${AWS::StackId} -r ECSLaunchConfigurationWindows --region ${AWS::Region}
                        cfn-signal.exe -e $lastexitcode --stack ${AWS::StackName} --resource ECSAutoScalingGroupWindows --region ${AWS::Region}
                        </powershell>
                    - Fn::Base64: !Sub |
                        <powershell>
                        ## The following line helps the DrainContainerInstance lambda function
                        # ECS_CLUSTER=${ECSCluster}
                        [Environment]::SetEnvironmentVariable("ECS_ENABLE_TASK_CPU_MEM_LIMIT", "false", "Machine")

                        Import-Module ECSTools
                        Initialize-ECSAgent -Cluster ${ECSCluster} -ReservedMemory 1536 -EnableTaskIAMRole -LoggingDrivers "[`"json-file`",`"awslogs`"]"
                        cfn-init.exe -v -s ${AWS::StackId} -r ECSLaunchConfigurationWindows --region ${AWS::Region}
                        cfn-signal.exe -e $lastexitcode --stack ${AWS::StackName} --resource ECSAutoScalingGroupWindows --region ${AWS::Region}
                        </powershell>
        Metadata:
            AWS::CloudFormation::Init:
                config:
                    files:
                        c:\cfn\cfn-hup.conf:
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}
                        c:\cfn\hooks.d\cfn-auto-reloader.conf:
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ECSLaunchConfigurationWindows.Metadata.AWS::CloudFormation::Init
                                action=cfn-init.exe -v -s ${AWS::StackId} -r ECSLaunchConfigurationWindows --region ${AWS::Region}
                    services:
                        windows:
                            cfn-hup:
                                enabled: 'true'
                                ensureRunning: 'true'
                                files:
                                - c:\cfn\cfn-hup.conf
                                - c:\cfn\hooks.d\cfn-auto-reloader.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                  -
                    Effect: "Allow"
                    Principal:
                        Service:
                            - "ec2.amazonaws.com"
                    Action:
                        - "sts:AssumeRole"
            Policies:
                - PolicyName: !Sub cloudwatch-${AWS::StackName}
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          -
                            Effect: "Allow"
                            Action:
                                - logs:CreateLogGroup
                            Resource: "*"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole

Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster
        Export:
            Name: !Sub ${AWS::StackName}-Cluster

    ECSHostSecurityGroup:
        Description: A reference to the ECS Hosts Security Group
        Value: !GetAtt ECSHostSecurityGroup.GroupId
        Export:
            Name: !Sub ${AWS::StackName}-ECSHostSecurityGroup
